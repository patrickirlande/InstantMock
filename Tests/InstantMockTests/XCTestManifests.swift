#if !canImport(ObjectiveC)
import XCTest

extension ArgClosureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgClosureTests = [
        ("testClosure_fiveArgs", testClosure_fiveArgs),
        ("testClosure_fourArgs", testClosure_fourArgs),
        ("testClosure_noArg", testClosure_noArg),
        ("testClosure_oneArg", testClosure_oneArg),
        ("testClosure_threeArgs", testClosure_threeArgs),
        ("testClosure_twoArgs", testClosure_twoArgs),
    ]
}

extension ArgTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgTests = [
        ("testAny_int", testAny_int),
        ("testAny_string", testAny_string),
        ("testEq_int", testEq_int),
        ("testEq_intOptional", testEq_intOptional),
        ("testEq_object", testEq_object),
        ("testEq_string", testEq_string),
        ("testVerify_string", testVerify_string),
    ]
}

extension ArgumentAnyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentAnyTests = [
        ("testDescription", testDescription),
        ("testMatch", testMatch),
    ]
}

extension ArgumentCaptorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentCaptorTests = [
        ("testAllValues", testAllValues),
        ("testCapture", testCapture),
        ("testValue", testValue),
    ]
}

extension ArgumentCaptorValuesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentCaptorValuesTests = [
        ("testAllValues", testAllValues),
        ("testValue", testValue),
    ]
}

extension ArgumentCaptureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentCaptureTests = [
        ("testAllValues_empty", testAllValues_empty),
        ("testDescription", testDescription),
        ("testMatch", testMatch),
        ("testValue_empty", testValue_empty),
        ("testValue_setValue_nil", testValue_setValue_nil),
        ("testValue_setValue_several", testValue_setValue_several),
        ("testValue_setValue_simple", testValue_setValue_simple),
        ("testValue_setValue_wrongType", testValue_setValue_wrongType),
    ]
}

extension ArgumentClosureCaptorTests_FiveArgs {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentClosureCaptorTests_FiveArgs = [
        ("testAllValues", testAllValues),
        ("testCapture", testCapture),
        ("testValue", testValue),
    ]
}

extension ArgumentClosureCaptorTests_FourArgs {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentClosureCaptorTests_FourArgs = [
        ("testAllValues", testAllValues),
        ("testCapture", testCapture),
        ("testValue", testValue),
    ]
}

extension ArgumentClosureCaptorTests_NoArg {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentClosureCaptorTests_NoArg = [
        ("testAllValues", testAllValues),
        ("testCapture", testCapture),
        ("testValue", testValue),
    ]
}

extension ArgumentClosureCaptorTests_OneArg {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentClosureCaptorTests_OneArg = [
        ("testAllValues", testAllValues),
        ("testCapture", testCapture),
        ("testValue", testValue),
    ]
}

extension ArgumentClosureCaptorTests_ThreeArgs {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentClosureCaptorTests_ThreeArgs = [
        ("testAllValues", testAllValues),
        ("testCapture", testCapture),
        ("testValue", testValue),
    ]
}

extension ArgumentClosureCaptorTests_TwoArgs {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentClosureCaptorTests_TwoArgs = [
        ("testAllValues", testAllValues),
        ("testCapture", testCapture),
        ("testValue", testValue),
    ]
}

extension ArgumentClosureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentClosureTests = [
        ("testDescription", testDescription),
        ("testMatch", testMatch),
    ]
}

extension ArgumentStorageTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentStorageTests = [
        ("testFlush", testFlush),
        ("testStore", testStore),
    ]
}

extension ArgumentValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentValueTests = [
        ("testDescription", testDescription),
        ("testMatch", testMatch),
    ]
}

extension ArgumentVerifyMandatoryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentVerifyMandatoryTests = [
        ("testDescription", testDescription),
        ("testMatch_success", testMatch_success),
        ("testMatch_wrongType", testMatch_wrongType),
    ]
}

extension ArgumentVerifyOptionalTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentVerifyOptionalTests = [
        ("testDescription", testDescription),
        ("testMatch_success", testMatch_success),
        ("testMatch_success_nil", testMatch_success_nil),
        ("testMatch_wrongType", testMatch_wrongType),
    ]
}

extension ArgumentsConfigurationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentsConfigurationTests = [
        ("testDescription_empty", testDescription_empty),
        ("testDescription_oneValue", testDescription_oneValue),
        ("testDescription_severalValues", testDescription_severalValues),
        ("testEquality", testEquality),
        ("testGreaterThan", testGreaterThan),
    ]
}

extension ArgumentsMatcherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentsMatcherTests = [
        ("testMatch_isAny", testMatch_isAny),
        ("testMatch_severalValues", testMatch_severalValues),
        ("testMatch_wrongNumberOfArgs", testMatch_wrongNumberOfArgs),
    ]
}

extension ArrayMockUsableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArrayMockUsableTests = [
        ("testEqual_toExpectedValue", testEqual_toExpectedValue),
        ("testEqual_toNil", testEqual_toNil),
        ("testEqual_toWrongType", testEqual_toWrongType),
        ("testEqual_toWrongValue", testEqual_toWrongValue),
    ]
}

extension BasicMockTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BasicMockTests = [
        ("testExpect", testExpect),
        ("testExpect_count", testExpect_count),
        ("testExpect_count_zero", testExpect_count_zero),
        ("testExpect_missingArgumentStorageFlushAfterRegistration", testExpect_missingArgumentStorageFlushAfterRegistration),
        ("testExpect_optional_nil", testExpect_optional_nil),
        ("testExpect_optional_nonnil", testExpect_optional_nonnil),
        ("testExpect_tuple", testExpect_tuple),
        ("testExpect_type", testExpect_type),
        ("testExpectAndStub", testExpectAndStub),
        ("testExpectProperty_any", testExpectProperty_any),
        ("testExpectProperty_value", testExpectProperty_value),
        ("testExpectProperty_value_setter_getter", testExpectProperty_value_setter_getter),
        ("testReject", testReject),
        ("testReject_count", testReject_count),
        ("testResetExpectations", testResetExpectations),
        ("testResetStubs", testResetStubs),
        ("testSeveralStubs", testSeveralStubs),
        ("testStub", testStub),
        ("testStub_returnAndDo", testStub_returnAndDo),
    ]
}

extension BoolMockUsableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BoolMockUsableTests = [
        ("testEqual_toExpectedValue", testEqual_toExpectedValue),
        ("testEqual_toNil", testEqual_toNil),
        ("testEqual_toWrongType", testEqual_toWrongType),
        ("testEqual_toWrongValue", testEqual_toWrongValue),
    ]
}

extension CallConfigurationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CallConfigurationTests = [
        ("testEqual", testEqual),
        ("testGreaterThan", testGreaterThan),
    ]
}

extension CallInterceptorStorageTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CallInterceptorStorageTests = [
        ("testAll", testAll),
        ("testInterceptors", testInterceptors),
        ("testRegisterInterceptors", testRegisterInterceptors),
        ("testRemoveAll", testRemoveAll),
    ]
}

extension CallInterceptorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CallInterceptorTests = [
        ("testMatching_noConfig", testMatching_noConfig),
        ("testMatching_oneMatching", testMatching_oneMatching),
        ("testMatching_success", testMatching_success),
    ]
}

extension CaptureMockTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CaptureMockTests = [
        ("testExpect_capture", testExpect_capture),
        ("testExpect_capture_closure", testExpect_capture_closure),
        ("testExpect_capture_closure_fiveArgs", testExpect_capture_closure_fiveArgs),
        ("testExpect_capture_closure_fiveArgs_throws", testExpect_capture_closure_fiveArgs_throws),
        ("testExpect_capture_closure_fourArgs", testExpect_capture_closure_fourArgs),
        ("testExpect_capture_closure_fourArgs_throws", testExpect_capture_closure_fourArgs_throws),
        ("testExpect_capture_closure_noArg", testExpect_capture_closure_noArg),
        ("testExpect_capture_closure_noArg_throws", testExpect_capture_closure_noArg_throws),
        ("testExpect_capture_closure_oneArg", testExpect_capture_closure_oneArg),
        ("testExpect_capture_closure_oneArg_throws", testExpect_capture_closure_oneArg_throws),
        ("testExpect_capture_closure_threeArgs", testExpect_capture_closure_threeArgs),
        ("testExpect_capture_closure_threeArgs_throws", testExpect_capture_closure_threeArgs_throws),
        ("testExpect_capture_closure_twoArgs", testExpect_capture_closure_twoArgs),
        ("testExpect_capture_closure_twoArgs_throws", testExpect_capture_closure_twoArgs_throws),
    ]
}

extension ClosureMockTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ClosureMockTests = [
        ("testExpect", testExpect),
        ("testExpect_fiveArgs", testExpect_fiveArgs),
        ("testExpect_fourArgs", testExpect_fourArgs),
        ("testExpect_noArg", testExpect_noArg),
        ("testExpect_oneArg", testExpect_oneArg),
        ("testExpect_optionalNil", testExpect_optionalNil),
        ("testExpect_optionalNotNil", testExpect_optionalNotNil),
        ("testExpect_threeArgs", testExpect_threeArgs),
        ("testExpect_twoArgs", testExpect_twoArgs),
    ]
}

extension DateMockUsableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DateMockUsableTests = [
        ("testEqual_toExpectedValue", testEqual_toExpectedValue),
        ("testEqual_toNil", testEqual_toNil),
        ("testEqual_toWrongType", testEqual_toWrongType),
        ("testEqual_toWrongValue", testEqual_toWrongValue),
    ]
}

extension DefaultClosureHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DefaultClosureHandlerTests = [
        ("testIt_fiveArgs", testIt_fiveArgs),
        ("testIt_fourArgs", testIt_fourArgs),
        ("testIt_noArgs", testIt_noArgs),
        ("testIt_oneArg", testIt_oneArg),
        ("testIt_threeArgs", testIt_threeArgs),
        ("testIt_twoArgs", testIt_twoArgs),
    ]
}

extension DefaultValueHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DefaultValueHandlerTests = [
        ("testIt_notMockUsable", testIt_notMockUsable),
        ("testIt_string", testIt_string),
    ]
}

extension DictionaryMockUsableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DictionaryMockUsableTests = [
        ("testEqual_toExpectedValue", testEqual_toExpectedValue),
        ("testEqual_toNil", testEqual_toNil),
        ("testEqual_toWrongKey", testEqual_toWrongKey),
        ("testEqual_toWrongOrder", testEqual_toWrongOrder),
        ("testEqual_toWrongType", testEqual_toWrongType),
        ("testEqual_toWrongValue", testEqual_toWrongValue),
    ]
}

extension DoubleMockUsableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DoubleMockUsableTests = [
        ("testEqual_toExpectedValue", testEqual_toExpectedValue),
        ("testEqual_toNil", testEqual_toNil),
        ("testEqual_toWrongType", testEqual_toWrongType),
        ("testEqual_toWrongValue", testEqual_toWrongValue),
    ]
}

extension ExpectationFactoryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExpectationFactoryTests = [
        ("testExpectationWithStub", testExpectationWithStub),
        ("testRejectionWithStub", testRejectionWithStub),
    ]
}

extension ExpectationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExpectationTests = [
        ("testHandleCall", testHandleCall),
        ("testReason_basic", testReason_basic),
        ("testReason_called", testReason_called),
        ("testReason_rejected_basic", testReason_rejected_basic),
        ("testReason_rejected_notCalled", testReason_rejected_notCalled),
        ("testReason_rejected_withExpectedNumberOfCalls", testReason_rejected_withExpectedNumberOfCalls),
        ("testReason_withExpectedNumberOfCalls", testReason_withExpectedNumberOfCalls),
        ("testVerified_basic", testVerified_basic),
        ("testVerified_called", testVerified_called),
        ("testVerified_withExpectedNumberOfCalls", testVerified_withExpectedNumberOfCalls),
        ("testVerify_accepted", testVerify_accepted),
        ("testVerify_rejected", testVerify_rejected),
    ]
}

extension FloatMockUsableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FloatMockUsableTests = [
        ("testEqual_toExpectedValue", testEqual_toExpectedValue),
        ("testEqual_toNil", testEqual_toNil),
        ("testEqual_toWrongType", testEqual_toWrongType),
        ("testEqual_toWrongValue", testEqual_toWrongValue),
    ]
}

extension IntMockUsableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IntMockUsableTests = [
        ("testEqual_toExpectedValue", testEqual_toExpectedValue),
        ("testEqual_toExpectedValue_int64", testEqual_toExpectedValue_int64),
        ("testEqual_toExpectedValue_uint64", testEqual_toExpectedValue_uint64),
        ("testEqual_toNil", testEqual_toNil),
        ("testEqual_toWrongType", testEqual_toWrongType),
        ("testEqual_toWrongValue", testEqual_toWrongValue),
    ]
}

extension MockCreationModalityTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MockCreationModalityTests = [
        ("testExpect_delegateFullMock", testExpect_delegateFullMock),
        ("testExpect_delegateItMock", testExpect_delegateItMock),
        ("testExpect_inheritanceMock", testExpect_inheritanceMock),
    ]
}

extension SetMockUsableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SetMockUsableTests = [
        ("testEqual_toExpectedValue", testEqual_toExpectedValue),
        ("testEqual_toNil", testEqual_toNil),
        ("testEqual_toWrongType", testEqual_toWrongType),
        ("testEqual_toWrongValue", testEqual_toWrongValue),
    ]
}

extension StringMockUsableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringMockUsableTests = [
        ("testEqual_toExpectedValue", testEqual_toExpectedValue),
        ("testEqual_toNil", testEqual_toNil),
        ("testEqual_toWrongType", testEqual_toWrongType),
        ("testEqual_toWrongValue", testEqual_toWrongValue),
    ]
}

extension StubTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StubTests = [
        ("testBest_none", testBest_none),
        ("testBest_one", testBest_one),
        ("testBest_several", testBest_several),
        ("testEqual", testEqual),
        ("testEqual_defaultFailure", testEqual_defaultFailure),
        ("testGreaterThan", testGreaterThan),
        ("testGreaterThan_defaultFailure", testGreaterThan_defaultFailure),
        ("testHandleCall_andDo", testHandleCall_andDo),
        ("testHandleCall_andReturn", testHandleCall_andReturn),
        ("testHandleCall_andReturn_andDo", testHandleCall_andReturn_andDo),
        ("testHandleCall_andReturn_andReturnClosure", testHandleCall_andReturn_andReturnClosure),
        ("testHandleCall_andReturnClosure", testHandleCall_andReturnClosure),
        ("testHandleCall_andReturnClosure_andDo", testHandleCall_andReturnClosure_andDo),
        ("testHandleCall_capture", testHandleCall_capture),
        ("testHandleCall_nil", testHandleCall_nil),
        ("testReturns_andReturn", testReturns_andReturn),
        ("testReturns_andReturnClosure", testReturns_andReturnClosure),
        ("testReturns_andThrow", testReturns_andThrow),
        ("testReturns_false", testReturns_false),
    ]
}

extension ThrowingMockTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ThrowingMockTests = [
        ("testStub_andThrow", testStub_andThrow),
        ("testStub_andThrow_returnNotThrow", testStub_andThrow_returnNotThrow),
        ("testStub_andThrow_returnThrow", testStub_andThrow_returnThrow),
    ]
}

extension TypesMockTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TypesMockTests = [
        ("testArray", testArray),
        ("testBool", testBool),
        ("testDate", testDate),
        ("testDictionary", testDictionary),
        ("testDouble", testDouble),
        ("testEmpty", testEmpty),
        ("testFloat", testFloat),
        ("testInt", testInt),
        ("testInt64", testInt64),
        ("testObject", testObject),
        ("testSet", testSet),
        ("testString", testString),
        ("testString_nil", testString_nil),
        ("testUnsignedInt", testUnsignedInt),
        ("testUnsignedInt64", testUnsignedInt64),
    ]
}

extension VerifierTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VerifierTests = [
        ("testEqual_bothNil", testEqual_bothNil),
        ("testEqual_firstNil", testEqual_firstNil),
        ("testEqual_floats", testEqual_floats),
        ("testEqual_int64s", testEqual_int64s),
        ("testEqual_references", testEqual_references),
        ("testEqual_secondNil", testEqual_secondNil),
        ("testEqual_strings", testEqual_strings),
        ("testEqual_stringsWithDifferentValues", testEqual_stringsWithDifferentValues),
        ("testEqual_uint64s", testEqual_uint64s),
        ("testEqualArray_failure", testEqualArray_failure),
        ("testEqualArray_success", testEqualArray_success),
        ("testMatch_closure_failure", testMatch_closure_failure),
        ("testMatch_differentReferences", testMatch_differentReferences),
        ("testTuples_failure", testTuples_failure),
        ("testTuples_success", testTuples_success),
        ("testTypes_failure", testTypes_failure),
        ("testTypes_success", testTypes_success),
        ("testVoid", testVoid),
    ]
}

extension VerifyMockTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VerifyMockTests = [
        ("testExpect_stringOpt", testExpect_stringOpt),
        ("testExpect_stringVerify", testExpect_stringVerify),
        ("testStub_intVerify", testStub_intVerify),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ArgClosureTests.__allTests__ArgClosureTests),
        testCase(ArgTests.__allTests__ArgTests),
        testCase(ArgumentAnyTests.__allTests__ArgumentAnyTests),
        testCase(ArgumentCaptorTests.__allTests__ArgumentCaptorTests),
        testCase(ArgumentCaptorValuesTests.__allTests__ArgumentCaptorValuesTests),
        testCase(ArgumentCaptureTests.__allTests__ArgumentCaptureTests),
        testCase(ArgumentClosureCaptorTests_FiveArgs.__allTests__ArgumentClosureCaptorTests_FiveArgs),
        testCase(ArgumentClosureCaptorTests_FourArgs.__allTests__ArgumentClosureCaptorTests_FourArgs),
        testCase(ArgumentClosureCaptorTests_NoArg.__allTests__ArgumentClosureCaptorTests_NoArg),
        testCase(ArgumentClosureCaptorTests_OneArg.__allTests__ArgumentClosureCaptorTests_OneArg),
        testCase(ArgumentClosureCaptorTests_ThreeArgs.__allTests__ArgumentClosureCaptorTests_ThreeArgs),
        testCase(ArgumentClosureCaptorTests_TwoArgs.__allTests__ArgumentClosureCaptorTests_TwoArgs),
        testCase(ArgumentClosureTests.__allTests__ArgumentClosureTests),
        testCase(ArgumentStorageTests.__allTests__ArgumentStorageTests),
        testCase(ArgumentValueTests.__allTests__ArgumentValueTests),
        testCase(ArgumentVerifyMandatoryTests.__allTests__ArgumentVerifyMandatoryTests),
        testCase(ArgumentVerifyOptionalTests.__allTests__ArgumentVerifyOptionalTests),
        testCase(ArgumentsConfigurationTests.__allTests__ArgumentsConfigurationTests),
        testCase(ArgumentsMatcherTests.__allTests__ArgumentsMatcherTests),
        testCase(ArrayMockUsableTests.__allTests__ArrayMockUsableTests),
        testCase(BasicMockTests.__allTests__BasicMockTests),
        testCase(BoolMockUsableTests.__allTests__BoolMockUsableTests),
        testCase(CallConfigurationTests.__allTests__CallConfigurationTests),
        testCase(CallInterceptorStorageTests.__allTests__CallInterceptorStorageTests),
        testCase(CallInterceptorTests.__allTests__CallInterceptorTests),
        testCase(CaptureMockTests.__allTests__CaptureMockTests),
        testCase(ClosureMockTests.__allTests__ClosureMockTests),
        testCase(DateMockUsableTests.__allTests__DateMockUsableTests),
        testCase(DefaultClosureHandlerTests.__allTests__DefaultClosureHandlerTests),
        testCase(DefaultValueHandlerTests.__allTests__DefaultValueHandlerTests),
        testCase(DictionaryMockUsableTests.__allTests__DictionaryMockUsableTests),
        testCase(DoubleMockUsableTests.__allTests__DoubleMockUsableTests),
        testCase(ExpectationFactoryTests.__allTests__ExpectationFactoryTests),
        testCase(ExpectationTests.__allTests__ExpectationTests),
        testCase(FloatMockUsableTests.__allTests__FloatMockUsableTests),
        testCase(IntMockUsableTests.__allTests__IntMockUsableTests),
        testCase(MockCreationModalityTests.__allTests__MockCreationModalityTests),
        testCase(SetMockUsableTests.__allTests__SetMockUsableTests),
        testCase(StringMockUsableTests.__allTests__StringMockUsableTests),
        testCase(StubTests.__allTests__StubTests),
        testCase(ThrowingMockTests.__allTests__ThrowingMockTests),
        testCase(TypesMockTests.__allTests__TypesMockTests),
        testCase(VerifierTests.__allTests__VerifierTests),
        testCase(VerifyMockTests.__allTests__VerifyMockTests),
    ]
}
#endif
